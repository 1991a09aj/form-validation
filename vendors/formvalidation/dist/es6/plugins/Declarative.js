import e from"../core/Plugin";export default class t extends e{constructor(e){super(e);this.opts=Object.assign({},{html5Input:false,pluginPrefix:"data-fvp-",prefix:"data-fv-"},e)}install(){this.parsePlugins();const e=this.parseOptions();Object.keys(e).forEach(t=>this.core.addField(t,e[t]))}parseOptions(){const e=this.opts.prefix;const t={};const s=this.core.getFields();const a=this.core.getFormElement();const n=[].slice.call(a.querySelectorAll(`[name], [${e}field]`));n.forEach(s=>{const a=this.parseElement(s);if(!this.isEmptyOption(a)){const n=s.getAttribute("name")||s.getAttribute(`${e}field`);t[n]=Object.assign({},t[n],a)}});Object.keys(t).forEach(e=>{Object.keys(t[e].validators).forEach(a=>{t[e].validators[a].enabled=t[e].validators[a].enabled||false;if(s[e]&&s[e].validators&&s[e].validators[a]){Object.assign(t[e].validators[a],s[e].validators[a])}})});return Object.assign({},s,t)}createPluginInstance(e,t){const s=e.split(".");let a=window||this;for(let e=0,t=s.length;e<t;e++){a=a[s[e]]}if(typeof a!=="function"){throw new Error(`the plugin ${e} doesn't exist`)}return new a(t)}parsePlugins(){const e=this.core.getFormElement();const t=new RegExp(`^${this.opts.pluginPrefix}([a-z0-9-]+)(___)*([a-z0-9-]+)*$`);const s=e.attributes.length;const a={};for(let n=0;n<s;n++){const s=e.attributes[n].name;const r=e.attributes[n].value;const i=t.exec(s);if(i&&i.length===4){const e=this.toCamelCase(i[1]);a[e]=Object.assign({},i[3]?{[this.toCamelCase(i[3])]:r}:{enabled:""===r||"true"===r},a[e])}}Object.keys(a).forEach(e=>{const t=a[e];const s=t["enabled"];const n=t["class"];if(s&&n){delete t["enabled"];delete t["clazz"];const s=this.createPluginInstance(n,t);this.core.registerPlugin(e,s)}})}isEmptyOption(e){const t=e.validators;return Object.keys(t).length===0&&t.constructor===Object}parseElement(e){const t=new RegExp(`^${this.opts.prefix}([a-z0-9-]+)(___)*([a-z0-9-]+)*$`);const s=e.attributes.length;const a={};const n=e.getAttribute("type");for(let r=0;r<s;r++){const s=e.attributes[r].name;const i=e.attributes[r].value;if(this.opts.html5Input){switch(true){case"minlength"===s:a["stringLength"]=Object.assign({},{enabled:true,min:parseInt(i,10)},a["stringLength"]);break;case"maxlength"===s:a["stringLength"]=Object.assign({},{enabled:true,max:parseInt(i,10)},a["stringLength"]);break;case"pattern"===s:a["regexp"]=Object.assign({},{enabled:true,regexp:i},a["regexp"]);break;case"required"===s:a["notEmpty"]=Object.assign({},{enabled:true},a["notEmpty"]);break;case"type"===s&&"color"===i:a["color"]=Object.assign({},{enabled:true,type:"hex"},a["color"]);break;case"type"===s&&"email"===i:a["emailAddress"]=Object.assign({},{enabled:true},a["emailAddress"]);break;case"type"===s&&"url"===i:a["uri"]=Object.assign({},{enabled:true},a["uri"]);break;case"type"===s&&"range"===i:a["between"]=Object.assign({},{enabled:true,max:parseFloat(e.getAttribute("max")),min:parseFloat(e.getAttribute("min"))},a["between"]);break;case"min"===s&&n!=="date"&&n!=="range":a["greaterThan"]=Object.assign({},{enabled:true,min:parseFloat(i)},a["greaterThan"]);break;case"max"===s&&n!=="date"&&n!=="range":a["lessThan"]=Object.assign({},{enabled:true,max:parseFloat(i)},a["lessThan"]);break;default:break}}const o=t.exec(s);if(o&&o.length===4){const e=this.toCamelCase(o[1]);a[e]=Object.assign({},o[3]?{[this.toCamelCase(o[3])]:i}:{enabled:""===i||"true"===i},a[e])}}return{validators:a}}toUpperCase(e){return e.charAt(1).toUpperCase()}toCamelCase(e){return e.replace(/-./g,this.toUpperCase)}}